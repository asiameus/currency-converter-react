{"version":3,"sources":["App/currencies.js","App/Form/Result/index.js","App/Form/index.js","App/index.js","serviceWorker.js","index.js"],"names":["currencies","short","name","rate","Result","result","className","undefined","sourceAmount","toFixed","targetAmount","currency","Form","calculateResult","useState","setCurrency","amount","setAmount","onSubmit","event","preventDefault","for","value","onChange","target","type","min","step","required","map","key","App","setResult","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kTAAaA,G,MAAa,CACxB,CACEC,MAAO,MACPC,KAAM,yBACNC,KAAM,QAER,CACEF,MAAO,MACPC,KAAM,OACNC,KAAM,QAER,CACEF,MAAO,MACPC,KAAM,iBACNC,KAAM,UCXGC,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACpB,uBAAGC,UAAU,eACCC,IAAXF,GACC,oCACGA,EAAOG,aAAaC,QAAQ,GAD/B,eAEG,IACAJ,EAAOK,aAAaD,QAAQ,GAH/B,OAGyCJ,EAAOM,aCJzCC,G,MAAO,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,gBAAiBR,EAAa,EAAbA,OAAa,EACnBS,mBAASd,EAAW,GAAGC,OADJ,mBAC5CU,EAD4C,KAClCI,EADkC,OAEvBD,mBAAS,IAFc,mBAE5CE,EAF4C,KAEpCC,EAFoC,KASnD,OACE,0BAAMX,UAAU,OAAOY,SANR,SAACC,GAChBA,EAAMC,iBACNP,EAAgBF,EAAUK,KAKxB,wBAAIV,UAAU,gBAAd,mBAGA,uBAAGA,UAAU,iBACX,2BAAOA,UAAU,cAAce,IAAI,UAAnC,0BACA,2BACEC,MAAON,EACPO,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBP,EAAUO,EAAOF,QAC3ChB,UAAU,cACVJ,KAAK,SACLuB,KAAK,SACLC,IAAI,OACJC,KAAK,OACLC,UAAQ,KAGZ,uBAAGtB,UAAU,iBACX,2BAAOA,UAAU,cAAce,IAAI,YAAnC,qCACA,4BACEC,MAAOX,EACPY,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBT,EAAYS,EAAOF,QAC7ChB,UAAU,cACVJ,KAAK,WACL0B,UAAQ,GAEP5B,EAAW6B,KAAK,SAAAlB,GAAQ,OACvB,4BACEmB,IAAKnB,EAASV,MACdqB,MAAOX,EAASV,OAEfU,EAAST,WAKlB,2BACE,4BAAQI,UAAU,gBAAlB,aAEF,kBAAC,EAAD,CAAQD,OAAQA,IAChB,uBAAGC,UAAU,cAAb,4DAGA,uBAAGA,UAAU,gBAAb,+BC3BSyB,MA1Bf,WAAgB,IAAD,EAEejB,qBAFf,mBAENT,EAFM,KAEE2B,EAFF,KAgBb,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,CACED,OAAQA,EACRQ,gBAhBkB,SAACF,EAAUK,GACjC,IAAMb,EAAOH,EACViC,MAAK,qBAAGhC,QAAsBU,KAC9BR,KAEH6B,EAAU,CACRxB,cAAeQ,EACfN,aAAcM,EAASb,EACvBQ,kBCLcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2149e339.chunk.js","sourcesContent":["export const currencies = [\n  {\n    short: \"USD\",\n    name: \"Dolar amerykański\",\n    rate: 4.4278,\n  },\n  {\n    short: \"EUR\",\n    name: \"Euro\",\n    rate: 4.9384,\n  },\n  {\n    short: \"GBP\",\n    name: \"Funt brytyjski\",\n    rate: 3.9058,\n  },\n];","import React from \"react\";\nimport \"./style.css\";\n\nexport const Result = ({ result }) => (\n  <p className=\"result\">\n    {result !== undefined && (\n      <>\n        {result.sourceAmount.toFixed(2)}&nbsp;PLN&nbsp;=\n        {\" \"}\n        {result.targetAmount.toFixed(2)}&nbsp;{result.currency}\n      </>\n    )}\n  </p>\n);\n\n// const Result = () => (\n//   <div className=\"result__container\">\n//     <p className=\"result\"></p>\n//     <p className=\"result__footer\">Wg średnich kursów z dnia 19.06.2020, za: npb.pl</p>\n//   </div>\n// );","import React, { useState } from \"react\";\nimport { currencies } from \"../currencies\";\nimport { Result } from \"./Result\";\nimport \"./style.css\";\n\nexport const Form = ({ calculateResult, result }) => {\n  const [currency, setCurrency] = useState(currencies[0].short);\n  const [amount, setAmount] = useState(\"\");\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    calculateResult(currency, amount);\n  };\n\n  return (\n    <form className=\"form\" onSubmit={onSubmit}>\n      <h1 className=\"form__header\">\n        Konwerter walut\n      </h1>\n      <p className=\"form__section\">\n        <label className=\"form__label\" for=\"amount\">Wpisz kwotę w PLN</label>\n        <input\n          value={amount}\n          onChange={({ target }) => setAmount(target.value)}\n          className=\"form__field\"\n          name=\"amount\"\n          type=\"number\"\n          min=\"0.01\"\n          step=\"0.01\"\n          required\n        />\n      </p>\n      <p className=\"form__section\">\n        <label className=\"form__label\" for=\"currency\">Wybierz docelową walutę</label>\n        <select\n          value={currency}\n          onChange={({ target }) => setCurrency(target.value)}\n          className=\"form__field\"\n          name=\"currency\"\n          required\n        >\n          {currencies.map((currency => (\n            <option\n              key={currency.short}\n              value={currency.short}\n            >\n              {currency.name}\n            </option>\n          )))}\n        </select>\n      </p>\n      <p>\n        <button className=\"form__button\">Przelicz</button>\n      </p>\n      <Result result={result} />\n      <p className=\"form__info\">\n        Wg średnich kursów z dnia 19.06.2020, za: npb.pl\n      </p>\n      <p className=\"form__footer\">\n        © Asia Meuś 2020\n      </p>\n    </form>\n  );\n};\n\n\n// const Form = () => (\n//   <form className=\"form\">\n//     <p className=\"form__section\">\n//       <label className=\"form__label\" for=\"amount\">Wpisz kwotę w PLN</label>\n//       <input className=\"form__field\" name=\"amount\" id=\"amount\" type=\"number\" min=\"0.01\"\n//         step=\"0.01\" required />\n//     </p>\n//     <p className=\"form__section\">\n//       <label className=\"form__label\" for=\"currency\">Wybierz docelową walutę</label>\n//       <select className=\"form__field\" name=\"currency\" id=\"currency\">\n//         <option value=\"EUR\">EUR</option>\n//         <option value=\"GBP\">GBP</option>\n//         <option value=\"USD\">USD</option>\n//       </select>\n//     </p>\n//     <p>\n//       <button className=\"form__button\">Przelicz</button>\n//     </p>\n//   </form>\n// );","import React, { useState } from 'react';\nimport './App.css';\nimport { Form } from \"./Form\";\nimport { currencies } from './currencies';\n\nfunction App() {\n\n  const [result, setResult] = useState();\n\n  const calculateResult = (currency, amount) => {\n    const rate = currencies\n      .find(({ short }) => short === currency)\n      .rate;\n\n    setResult({\n      sourceAmount: +amount,\n      targetAmount: amount / rate,\n      currency,\n    });\n  }\n\n  return (\n    <div className=\"app\">\n      <Form\n        result={result}\n        calculateResult={calculateResult}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}