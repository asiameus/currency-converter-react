{"version":3,"sources":["Form/index.js","Result/index.js","Header/index.js","Footer/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","className","for","name","id","type","min","step","required","value","Result","Header","Footer","Container","children","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uUAwBeA,G,UArBF,kBACX,0BAAMC,UAAU,QACd,uBAAGA,UAAU,iBACX,2BAAOA,UAAU,cAAcC,IAAI,UAAnC,0BACA,2BAAOD,UAAU,cAAcE,KAAK,SAASC,GAAG,SAASC,KAAK,SAASC,IAAI,OACzEC,KAAK,OAAOC,UAAQ,KAExB,uBAAGP,UAAU,iBACX,2BAAOA,UAAU,cAAcC,IAAI,YAAnC,qCACA,4BAAQD,UAAU,cAAcE,KAAK,WAAWC,GAAG,YACjD,4BAAQK,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,SAGJ,2BACE,4BAAQR,UAAU,gBAAlB,gBCTSS,G,MAPA,kBACb,yBAAKT,UAAU,qBACb,uBAAGA,UAAU,WACb,uBAAGA,UAAU,kBAAb,+DCGWU,G,MANA,kBACb,4BAAQV,UAAU,UAChB,wBAAIA,UAAU,kBAAd,sBCIWW,G,MANA,kBACb,4BAAQX,UAAU,UAChB,uBAAGA,UAAU,gBAAb,+BCIWY,G,MANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAChB,0BAAMb,UAAU,aACba,KCaUC,MAXf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8f751938.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Form = () => (\n  <form className=\"form\">\n    <p className=\"form__section\">\n      <label className=\"form__label\" for=\"amount\">Wpisz kwotę w PLN</label>\n      <input className=\"form__field\" name=\"amount\" id=\"amount\" type=\"number\" min=\"0.01\"\n        step=\"0.01\" required />\n    </p>\n    <p className=\"form__section\">\n      <label className=\"form__label\" for=\"currency\">Wybierz docelową walutę</label>\n      <select className=\"form__field\" name=\"currency\" id=\"currency\">\n        <option value=\"EUR\">EUR</option>\n        <option value=\"GBP\">GBP</option>\n        <option value=\"USD\">USD</option>\n      </select>\n    </p>\n    <p>\n      <button className=\"form__button\">Przelicz</button>\n    </p>\n  </form>\n);\n\nexport default Form;","import React from \"react\";\nimport \"./style.css\";\n\nconst Result = () => (\n  <div className=\"result__container\">\n    <p className=\"result\"></p>\n    <p className=\"result__footer\">Wg średnich kursów z dnia 19.06.2020, za: npb.pl</p>\n  </div>\n);\n\nexport default Result;","import React from \"react\";\nimport \"./style.css\";\n\nconst Header = () => (\n  <header className=\"header\">\n    <h1 className=\"header__header\">Konwerter walut</h1>\n  </header>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nconst Footer = () => (\n  <footer className=\"footer\">\n    <p className=\"footer__text\">© Asia Meuś 2020</p>\n  </footer>\n);\n\nexport default Footer;","import React from \"react\";\nimport \"./style.css\"\n\nconst Container = ({ children }) => (\n  <main className=\"container\">\n    {children}\n  </main>\n);\n\nexport default Container;","import React from 'react';\nimport Form from \"./Form\";\nimport Result from \"./Result\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Container from \"./Container\";\n\nfunction App() {\n  return (\n    <Container>\n      <Header />\n      <Form />\n      <Result />\n      <Footer />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}